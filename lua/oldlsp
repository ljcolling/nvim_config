local nvim_lsp = require("lspconfig")

local servers = { "r_language_server", "sumneko_lua", "pyright", "rust_analyzer",
  "clangd", "tsserver", "gopls",
  "cssls", "bashls", "emmet_ls", "julials" } --, "denols"}

-- nvim_lsp.ltex.setup {
--   --on_attach = on_attach,
--   settings = {
--     language = "en"
--     }
--   }
--
--
require("grammar-guard").init()
-- LSP settings


-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(_, bufnr)
  -- Enable completion triggered by <c-x><c-o>
  -- vim.api.nvim_buf_set_option(bufnr, "omnifunc", "v:lua.vim.lsp.omnifunc")

  -- Mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  -- local bufopts = { noremap = true, silent = true, buffer = bufnr }
  -- vim.keymap.set("n", "gD", vim.lsp.buf.declaration, bufopts)
  -- vim.keymap.set("n", "gd", vim.lsp.buf.definition, bufopts)
  -- vim.keymap.set("n", "K", vim.lsp.buf.hover, bufopts)
  -- vim.keymap.set("n", "gi", vim.lsp.buf.implementation, bufopts)
  -- vim.keymap.set("n", "<space>k", vim.lsp.buf.signature_help, bufopts)
  -- vim.keymap.set("n", "<space>wa", vim.lsp.buf.add_workspace_folder, bufopts)
  -- vim.keymap.set("n", "<space>wr", vim.lsp.buf.remove_workspace_folder, bufopts)
  -- vim.keymap.set("n", "<space>l", function()
  -- 	print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
  -- end, bufopts)
  -- vim.keymap.set("n", "<space>D", vim.lsp.buf.type_definition, bufopts)
  -- vim.keymap.set("n", "<space>rn", vim.lsp.buf.rename, bufopts)
  -- vim.keymap.set("n", "<space>ca", vim.lsp.buf.code_action, bufopts)
  -- vim.keymap.set("n", "gr", vim.lsp.buf.references, bufopts)
  -- vim.keymap.set("n", "<space>f", vim.lsp.buf.formatting, bufopts)
end

local lsp_flags = {
  -- This is the default in Nvim 0.7+
  debounce_text_changes = 150,
}

for _, v in pairs(servers) do
  if v ~= "grammar_guard" then -- setup everything except grammar_guard
    nvim_lsp[v].setup({
      on_attach = on_attach,
      flags = lsp_flags,
    })
  end
end

-- setup grammar guard



local nvim_lsp = require("lspconfig")
nvim_lsp["grammar_guard"].setup({
  cmd = { "/Applications/ltex-ls-15.2.0/bin/ltex-ls" },
  on_attach = on_attach,
  settings = {
    ltex = {
      enabled = { "latex", "tex", "bib", "markdown", "pandoc" },
      language = "en",
      diagnosticSeverity = "information",
      setenceCacheSize = 2000,
      additionalRules = {
        enablePickyRules = true,
        motherTongue = "en",
        languageModel = "~/ngram/"
      },
      trace = { server = "verbose" },
      dictionary = {},
      disabledRules = {},
      hiddenFalsePositives = {},
    },
  },
})



require("plugins.cmp")
require("plugins.null-ls")

--[[
local opts = {
    tools = {
        autoSetHints = true,
        rust_hover_actions = true,
        runnables = {
            use_telescope = true
        },
        inlay_hints = {
            show_parameter_hints = false,
            parameter_hints_prefix = "",
            other_hints_prefix = "",
        },
    },

    -- all the opts to send to nvim-lspconfig
    -- these override the defaults set by rust-tools.nvim
    -- see https://github.com/neovim/nvim-lspconfig/blob/master/CONFIG.md#rust_analyzer
    server = {
        -- on_attach is a callback called when the language server attachs to the buffer
        on_attach = on_attach,
        settings = {
            -- to enable rust-analyzer settings visit:
            -- https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/generated_config.adoc
            ["rust-analyzer"] = {
                -- enable clippy on save
                checkOnSave = {
                    command = "clippy"
                },
            }
        }
    },
}
]]

require('rust-tools').setup(opts)

--
--
--
local status, nvim_lsp = pcall(require, "lspconfig")
if (not status) then return end

--[[ local protocol = require('vim.lsp.protocol') ]]

local on_attach = function(client, bufnr)
  -- format on save
  if client.server_capabilities.documentFormattingProvider then
    vim.api.nvim_create_autocmd("BufWritePre", {
      group = vim.api.nvim_create_augroup("Format", { clear = true }),
      buffer = bufnr,
      callback = function() vim.lsp.buf.formatting_seq_sync() end
    })
  end
end

-- TypeScript
nvim_lsp.tsserver.setup {
  on_attach = on_attach,
  filetypes = { "typescript", "typescriptreact", "typescript.tsx" },
  cmd = { "typescript-language-server", "--stdio" }
}
--[[
nvim_lsp.ltex.setup {
  on_attach = on_attach,
  settings = {
    ltex = {
         additionalRules = {
           languageModel = '~/ngram/',
         },
    },
  },
}
]]--

--[[ WxsYmFjaz93aW5kb3dJZD0x ]]
